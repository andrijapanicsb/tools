#!/bin/bash
TIME=$(date +%d-%m-%Y-%H-%M-%S)
RUNTIME=60
# delete previous results ?, not needed maybe...
# rm -rf results-*.txt

RESULTRAND(){
        LATMSorUS=$(grep lat results-$TEST-$TIME.txt | grep -vE "(slat|clat|platform)" | grep avg | awk '{print $2}')
		LAT=$(grep lat results-$TEST-$TIME.txt | grep -vE "(slat|clat|platform)" | head -n 1 | awk -F ',' '{print $3}')
        BW=$(grep "bw=" results-$TEST-$TIME.txt | tr " " "\n" | grep bw)
        IOPS=IOPS" "$(grep "IOPS" results-$TEST-$TIME.txt | awk '{print $2}')
        echo "$IOPS $BW Lat$LATMSorUS $LAT"
        }

RESULTSEQ(){
        LATMSorUS=$(grep lat results-$TEST-$TIME.txt | grep -vE "(slat|clat|platform)" | grep avg | awk '{print $2}')
		LAT=$(grep lat results-$TEST-$TIME.txt | grep -vE "(slat|clat|platform)" | head -n 1 | awk -F ',' '{print $3}')
        BW=$(grep "bw=" results-$TEST-$TIME.txt | tr " " "\n" | grep bw)
        IOPS=IOPS" "$(grep "IOPS" results-$TEST-$TIME.txt | awk '{print $2}')
        echo "$BW $IOPS Lat$LATMSorUS $LAT"
        }



# ioengine=sync, iodepth always is 1 (no matter what we set it to)
# ioengine=libaio, iodepth is configurable (outstanding IO in the queue, per thread/job)
# numjobs = double the CPU ? 8 for inside single VM...

#liabio, sync=0
RANDREAD(){ fio --runtime=$RUNTIME --time_based --clocksource=clock_gettime --name=randread --iodepth=128 --numjobs=4 --rw=randread --bs=4k --size=100g --ioengine=libaio --filename=fio.tmp --direct=1 --group_reporting > results-$TEST-$TIME.txt; }
RANDWRITE(){ fio --runtime=$RUNTIME --time_based --clocksource=clock_gettime --name=randwrite --iodepth=128 --numjobs=4 --rw=randwrite --bs=4k --size=100g --ioengine=libaio --filename=fio.tmp --direct=1 --group_reporting > results-$TEST-$TIME.txt; }


# Sequential read/write tests, no variants needed
SEQREAD(){ fio --runtime=$RUNTIME --time_based --clocksource=clock_gettime --name=read --iodepth=128 --numjobs=4 --rw=read --bs=64k --size=100g --ioengine=libaio --filename=fio.tmp --direct=1 --group_reporting > results-$TEST-$TIME.txt; }
SEQWRITE(){ fio --runtime=$RUNTIME --time_based --clocksource=clock_gettime --name=write --iodepth=128 --numjobs=4 --rw=write --bs=64k --size=100g --ioengine=libaio --filename=fio.tmp --direct=1 --group_reporting > results-$TEST-$TIME.txt; }

echo " "
echo " "
echo "#####################################################################################################################################################"
echo "##### --iodepth=128 --numjobs=8 --bs=4k --size=100g --ioengine=libaio --sync=0 --direct=1 #####"
TEST=RANDOMREAD1
echo " "
echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo "### STARTING $TEST TEST..."
for run in {1..3};do echo 3 > /proc/sys/vm/drop_caches; RANDREAD; RESULTRAND; done

TEST=RANDOMWRITE1
echo " "
echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo "### STARTING $TEST TEST..."
for run in {1..3};do echo 3 > /proc/sys/vm/drop_caches; RANDWRITE; RESULTRAND; done
echo " "
echo " "


echo " "
echo " "
echo "#####################################################################################################################################################"
echo "##### --iodepth=128 --numjobs=8 --bs=64k --size=100g --ioengine=libaio --sync=0 --direct=1 #####"

TEST=SEQREAD
echo " "
echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo "### STARTING $TEST TEST..."
for run in {1..3};do echo 3 > /proc/sys/vm/drop_caches; SEQREAD; RESULTSEQ; done

TEST=SEQWRITE
echo " "
echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo "### STARTING $TEST TEST..."
for run in {1..3};do echo 3 > /proc/sys/vm/drop_caches; SEQWRITE; RESULTSEQ; done
